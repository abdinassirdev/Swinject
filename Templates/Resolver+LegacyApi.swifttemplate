<% let arg_count = 9 %>
// sourcery:inline:ResolverLegacyApi
public extension Resolver {
    /// Retrieves the instance with the specified service type.
    ///
    /// - Parameter serviceType: The service type to resolve.
    ///
    /// - Returns: The resolved service type instance, or nil if no service is found.
    func resolve<Service>(_ serviceType: Service.Type) -> Service? {
        fatalError()
    }

    /// Retrieves the instance with the specified service type and registration name.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
    ///   - name:        The registration name.
    ///
    /// - Returns: The resolved service type instance, or nil if no service with the name is found.
    func resolve<Service>(_ serviceType: Service.Type, name: String?) -> Service? {
        fatalError()
    }

<%_ (1...arg_count).forEach { i in
    let arg_types = (1...i).map { "Arg\($0)" }.joined(separator: ", ")
    let arg_param = i == 1 ? "argument: Arg1" : "arguments arg1: Arg1, " + (2...i).map{ "_ arg\($0): Arg\($0)" }.joined(separator: ", ")
    let arg_param_name = i == 1 ? "argument" : "arguments"
    let arg_param_description = i == 1 ? "\(i) argument" : "list of \(i) arguments"
-%>
    /// Retrieves the instance with the specified service type and <%= arg_param_description %> to the factory closure.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
    ///   - <%= arg_param_name %>:   <%= arg_param_description.capitalized %> to pass to the factory closure.
    ///
    /// - Returns: The resolved service type instance, or nil if no registration for the service type
    ///            and <%= arg_param_description %> is found.
    func resolve<Service, <%= arg_types %>>(_ serviceType: Service.Type, <%= arg_param %>) -> Service? {
        fatalError()
    }

    /// Retrieves the instance with the specified service type, <%= arg_param_description %> to the factory closure and registration name.
    ///
    /// - Parameters:
    ///   - serviceType: The service type to resolve.
    ///   - name:        The registration name.
    ///   - <%= arg_param_name %>:   <%= arg_param_description.capitalized %> to pass to the factory closure.
    ///
    /// - Returns: The resolved service type instance, or nil if no registration for the service type,
    ///            <%= arg_param_description %> and name is found.
    func resolve<Service, <%= arg_types %>>(_ serviceType: Service.Type, name: String?, <%= arg_param %>) -> Service? {
        fatalError()
    }

<%_ } -%>
}
// sourcery:end
