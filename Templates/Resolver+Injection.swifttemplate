<%- include("SwiftCode") %>
// sourcery:inline:ResolverInjectionApi
extension Resolver {
<%_ InjectionVariation.simpleCases.forEach { v in -%>
    func instance<<%= v.genericTypes %>>(<%= v.params %>) throws -> Type <%= v.whereClause %>{
        try resolve(request(<%= v.requestParams %>))
    }

<%_ } -%>
}

extension Resolver {
<%_ InjectionVariation.simpleCases.forEach { v in -%>
    func provider<<%= v.genericTypes %>>(<%= v.params %>) -> () throws -> Type <%= v.whereClause %>{
        return { try self.resolve(request(<%= v.requestParams %>)) }
    }

<%_ } -%>
}

extension Resolver {
<%_ InjectionVariation.factoryCases.forEach { v in -%>
    func factory<<%= v.genericTypes %>>(<%= v.params %>) -> (<%= v.factoryInputs %>) throws -> Type <%= v.whereClause %>{
        return { try self.resolve(request(<%= v.requestParams %>)) }
    }

<%_ } -%>
}
// sourcery:end
